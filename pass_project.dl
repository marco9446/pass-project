// don't remove this comment 
.type label
.type var
.type opc = [x:number,c:number]
.type opv = [x:number,y:number]
//.type expr //= number | var | opc | opv
//.type cond //= [e:expr,constyp:number]// assume 1 for <, 2 for <= and 3 
// for ==, 4 for >= and 5 for >

// -- inputs --
.decl source( l:label, x:var )
.decl sink( l:label, x:var ) 
.decl follows( l1:label, l2:label) 

.decl join(l1: label, l2: label, l3:label) 
.decl assign( l:label, x:var, y:var, z:var ) 
.decl if(l1:label, l2:label, x:var, y:var)



.decl reachable(l:label, j:label)
// .output reachable(IO=stdout)
reachable(X,Y)  :-  follows(X,Y).
reachable(X,Y)  :-  reachable(X,Z), follows(Z,Y).




.decl candidate( l:label, x: var) 
// .output candidate(IO=stdout)
candidate(l, x) :- source( l ,x).
candidate(l, x) :- assign(l,x,y,_), candidate(q,y), reachable(l,q).
candidate(l, x) :- assign(l,x,_,z), candidate(q,z), reachable(l,q).
candidate(l, x) :- ( if(l,_,x,_);if(l,_,_,x)), candidate(q,x), reachable(l,q).


.decl sinkable(l:label, v:var)
// .output sinkable(IO=stdout)
sinkable(l, v) :- sink(l, v).
sinkable(l, x) :- assign(l,x,d1,d2), sinkable(q, x), reachable(q, l), 
                (candidate(ld1, d1),reachable(l,ld1) ; candidate(ld2, d2), reachable(l,ld2)).


/*
    Return three labels corresponding to the location of the if-else-join of each if-else.
*/
.decl if_else_finder(i:label, e:label, j:label) 
// .output if_else_finder(IO=stdout)
if_else_finder(i,e,j) :- if(i, _ ,x,y), if(e, _ ,x,y), join(j, ij ,ej), 
                !follows(e, ij), 
                follows(j, ej), 
                i != e, 
                reachable(ij, i), 
                reachable(ej, e),
                follows(i, l2), follows(e, l2).






/* 
    Given a source v, that is present also in a sink, the following function finds if there is a path
    realted to the if_label 'i', where this variable v is assigned to something else (label l).
    This rule will be used later to find the opposite.
*/
.decl source_sink_assigned_in_a_path(i:label, l:label, v:var)

// .output source_sink_assigned_in_a_path(IO=stdout)

source_sink_assigned_in_a_path(if_label,j,v ) :- source(_,v), sink(_,v), 
                                        belonging_if(if_label,j),
                                        ( assign(j,v,d,_); assign(j,v,_,d) ).

source_sink_assigned_in_a_path(if_label,j,v ) :- source(_,v), sink(_,v), 
                                        belonging_if(if_label,j),
                                        assign(l11,v,d1,d2), reachable(j,l11),
                                        ( assign(j,_,d,_); assign(j,_,_,d) ).

/*
    Given a source v, that is present also in a sink, the following function finds all those paths
    where the variable is NOT assigned.
    This rule is used to set the dependency of the variable to itself in the label following the if_label or the 
    else_label 'l'.
*/
.decl source_sink_NOT_assigned_in_a_path(i:label, l:label, v:var)

// .output source_sink_NOT_assigned_in_a_path(IO=stdout)

source_sink_NOT_assigned_in_a_path(if_label, l, v) :- source(_,v), sink(_,v), if(if_label,l,_,_),
                                        assign(la,_,_,_),
                                        belonging_if(if_label, la),
                                        !source_sink_assigned_in_a_path(if_label,_,v).





/*  
    It may happen that a variable (not a source), used in a sink method, is assigned in a path, but not assigned
    in another path.
*/
.decl var_in_sink_assigned_in_a_path(i:label, l:label, v:var)
.output var_in_sink_assigned_in_a_path(IO=stdout)

var_in_sink_assigned_in_a_path(if_label,j,v ) :- ( assign(j,v,d,_); assign(j,v,_,d) ),
                                                    sink(_,v),
                                                    belonging_if(if_label,j).



.decl var_in_sink_NOT_assigned_in_a_path(i:label, l:label, v:var)

.output var_in_sink_NOT_assigned_in_a_path(IO=stdout)

var_in_sink_NOT_assigned_in_a_path(else_label, l, v) :- var_in_sink_assigned_in_a_path(if_label,_,v),
                                                        !assign(lq,v,_,_), belonging_if(lif,lq), 
                                                        reachable(lq,else_label),
                                                        if_else_finder(if_label, else_label,_),
                                                        follows(l,else_label),
                                                        !var_in_sink_assigned_in_a_path(else_label,_,v).

var_in_sink_NOT_assigned_in_a_path(if_label, l, v) :- var_in_sink_assigned_in_a_path(else_label,_,v),
                                                        !assign(lq,v,_,_), belonging_if(lif,lq), 
                                                        reachable(lq,if_label),
                                                        if_else_finder(if_label, else_label,_),
                                                        follows(l,if_label),
                                                        !var_in_sink_assigned_in_a_path(if_label,_,v).

/* 
    Data una variabile y, che ha un "path" in cui non viene assegnata", trova gli assignment precedenti
    ci servir√† per poi prendere l'ultimo
*/
.decl find_all_previous_ass( l:label, j:label)
//.output find_all_previous_ass(IO=stdout)
find_all_previous_ass(l,j) :- var_in_sink_NOT_assigned_in_a_path(if_label, j, v),
                                ( assign(l,v,d,_);assign(l,v,_,d) ), candidate(ld,d), reachable(l,ld),
                                reachable(j,l).

.decl find_previous( l:label, j:label)
// .output find_previous(IO=stdout)
find_previous(l,j) :-   find_all_previous_ass(l,j),
                        c = count:{find_all_previous_ass(_,j)}, c<2.
                                                
find_previous(l,j) :-   find_all_previous_ass(l,j),
                        !find_NOT_previous(l,j),
                        c = count:{find_all_previous_ass(_,j)}, c>1.

.decl find_NOT_previous( l:label, j:label)
//.output find_NOT_previous(IO=stdout)
find_NOT_previous(l1,j1) :-     find_all_previous_ass(l1,j1),
                                find_all_previous_ass(l2,j2),
                                reachable(l2,l1),
                                c = count:{find_all_previous_ass(_,j)}, c>1.


/*
    Finds all the if_else_join labels of tbe if-else, that HAVE other if-else nested.
*/
.decl external_if(i:label, e:label, j:label)
//.output external_if(IO=stdout)
external_if(l1,e,j) :- if(l0,_,_,_), if(l1,_,_,_), reachable(l0,l1), if_else_finder(l1,e,j).


/*
    Find all the if_else_join labels of the if-else that DOES NOT HAVE an if-else nested.
*/
.decl internal_if(i:label, e:label, j:label)
//.output internal_if(IO=stdout)
internal_if(l,e,j) :- if_else_finder(l,e,j), !external_if(l,_,_).



/*
    Given a label l, find the immediate predecessor 'if' to which that label belongs.
*/
.decl NOT_belonging_if(j:label, l:label) /* Label l DOES NOT belong to if in label j */
//.output NOT_belonging_if(IO=stdout)
NOT_belonging_if(j1,l) :- assign(l,_,_,_), if(j1,_,_,_), if(j2,_,_,_), reachable(l,j1), reachable(l,j2),
                        !reachable(j1,j2), reachable(j2,j1).


NOT_belonging_if(j1,l) :- if(l,_,_,_), if(j1,_,_,_), if(j2,_,_,_), reachable(l,j1), reachable(l,j2),
                        !reachable(j1,j2), reachable(j2,j1).


.decl belonging_if(j:label, l:label) /* Label l belongs to if in label j */

// .output belonging_if(IO=stdout)
belonging_if(j1,l) :- assign(l,_,_,_), if(j1,_,_,_), reachable(l,j1), !NOT_belonging_if(j1,l).
belonging_if(j1,l) :- if(l,_,_,_), if(j1,_,_,_), reachable(l,j1), !NOT_belonging_if(j1,l).



/*  
    Given a if-else-join in label i, 
    given a variable v in label l, that belongs to 
    the path of that if-else, it finds a dependency d
*/ 
.decl find_all_assign_of_var_in_assignment(i:label, j:label, v:var) //Assignment of variable v in label j, has an assignment in label i
// .output find_all_assign_of_var_in_assignment(IO=stdout)

find_all_assign_of_var_in_assignment(i,j,d1) :- ( assign(j,_,d1,_); assign(j,_,_,d1)), assign(i,d1,_,_), reachable(j,i).
find_all_assign_of_var_in_assignment(i,j,d1) :- ( assign(j,_,d1,_); assign(j,_,_,d1)), source(i,d1), reachable(j,i).


.decl find_not_assign_of_var_in_assignment(i:label, j:label, v:var)
// .output find_not_assign_of_var_in_assignment(IO=stdout)

find_not_assign_of_var_in_assignment(i1,j, v) :-    find_all_assign_of_var_in_assignment(i1,j,v),
                                                    find_all_assign_of_var_in_assignment(i2,j,v),
                                                    reachable(i2,i1).


.decl find_closest_assign_of_var_in_assignment(i:label, j:label, v:var)
// .output find_closest_assign_of_var_in_assignment(IO=stdout)
find_closest_assign_of_var_in_assignment (i, j, v) :- find_all_assign_of_var_in_assignment(i, j, v),
                                                    !find_not_assign_of_var_in_assignment(i, j, v).




.decl find_all_assign_of_var_sink(i:label, j:label, v:var) //Assignment of variable v in label j, has an assignment in label i
// .output find_all_assign_of_var_sink(IO=stdout)
find_all_assign_of_var_sink(l,j,v) :-  sink(j,v), ( assign(l,v,d1,d2) ; source(l,v)).


.decl find_not_assign_of_var_sink(i:label, j:label, v:var)
// .output find_not_assign_of_var_sink(IO=stdout)

find_not_assign_of_var_sink(i1,j, v) :-    find_all_assign_of_var_sink(i1,j,v),
                                                    find_all_assign_of_var_sink(i2,j,v),
                                                    reachable(i2,i1).


.decl find_closest_assign_of_var_sink(i:label, j:label, v:var)
// .output find_closest_assign_of_var_sink(IO=stdout)
find_closest_assign_of_var_sink (i, j, v) :- find_all_assign_of_var_sink(i, j, v),
                                                    !find_not_assign_of_var_sink(i, j, v).




.decl assign_candidate(l:label)
// .output assign_candidate(IO=stdout)

assign_candidate(l) :- assign(l,v,d1,d2), ((candidate(ld1,d1),reachable(l,ld1));(candidate(ld2,d2), reachable(l,ld2))).


.decl assign_constant(l:label)
// .output assign_constant(IO=stdout)

assign_constant(l) :- assign(l,v,d1,d2), !assign_candidate(l).



.decl dependencies(i:label, l:label, v:var, d:var, s:symbol ) 
// .output dependencies(IO=stdout)

dependencies(belonging_label,j,v,d, s ) :- s="right", ( assign(j,v,d,_); assign(j,v,_,d) ),
                                    belonging_if(belonging_label,j), 
                                    find_closest_assign_of_var_in_assignment(l1,j,d),
                                    !assign_constant(l1),                                                              
                                    sink(_,v). 
                                    

dependencies(belonging_label,belonging_label,v,v,s ) :- s="right", find_closest_assign_of_var_in_if(l1,belonging_label,v),
                                        !assign_constant(l1),
                                        assign(la,z,d1,d2), belonging_if(belonging_label,la),
                                        assign_constant(la).


dependencies(belonging_label,j,v,d,s ) :-   s="right", var_in_sink_NOT_assigned_in_a_path(_, j, v),
                                belonging_if(belonging_label,j),
                            find_previous(l,j), ( assign(l,v,d,_);assign(l,v,_,d)), 
                            candidate(ld,d), reachable(l,ld),
                            sink(_,v).


dependencies(if_label,j,v,v, s ) :-  s="right",source_sink_NOT_assigned_in_a_path(if_label, j, v).


dependencies(belonging_label,j,v,v, s ) :- s="left", ( assign(j,v,d,_); assign(j,v,_,d) ),
                                    belonging_if(belonging_label,j), 
                                    !find_closest_assign_of_var_in_if(_ ,belonging_label, _),
                                    find_closest_assign_of_var_in_assignment(l1,j,d),
                                    !assign_constant(l1),                                                                  

                                    sink(_,v).   /*Has to be in the sink and we have to be in the
                                                                                 "left-hand" side mode.
                                                                                */


dependencies(belonging_label,j,v,v ,s) :-  s="left", ( assign(j,v,d,_); assign(j,v,_,d) ),  /*There has to be an assign v = d ...

                                                                            where v is the variable to sink and
                                                                            d the dependency
                                                                            */
                                    belonging_if(belonging_label,j), /*Takes only the belonging if of the assign */
                                    find_closest_assign_of_var_in_if(l1,belonging_label,_),
                                    sink(_,v).   /*Has to be in the sink and we have to be in the
                                                                                 "left-hand" side mode.
                                                                                */






dependencies(belonging_label,j,v,v,s ) :-  s="left",  var_in_sink_NOT_assigned_in_a_path(_, j, v),
                                belonging_if(belonging_label,j),
                                        find_previous(l,j), ( assign(l,v,d,_);assign(l,v,_,d)), candidate(ld,d), reachable(l,ld),
                                        sink(_,v).



//TODO: SERVE FORSE IL CASO IN CUI LA X, SOURCE, VIENE SEMPRE ASSEGNATA A DELLE COSTANTI ?


dependencies(if_label,j,v,v, s ) :- s="left",source_sink_NOT_assigned_in_a_path(if_label, j, v).


                                


.decl most_external_if(i:label, e:label, j:label)

// .output most_external_if(IO=stdout)
most_external_if(i,e,j) :- if(i,_,_,_), if(e,_,_,_), successive_if(i,_), successive_if(e,_), 
                            !successive_if(_,i), !successive_if(_,e), if_else_finder(i,e,j),
                            c = count:{if(_,_,_,_)}, c>2.

most_external_if(i,e,j) :- if(i,_,_,_), if(e,_,_,_), if_else_finder(i,e,j),
                            c = count:{if(_,_,_,_)}, c<3.






.decl not_candidate(l:label, v:var)
// .output not_candidate(IO=stdout)
not_candidate(l, v) :- assign(l, v, _, _), !candidate(l,_).



.decl sanitize_no_if(l:label, v:var)
// .output sanitize_no_if(IO=stdout)
sanitize_no_if(l,b) :- !if(_,_,_,_), 
                       sink(l,b),
                        find_closest_assign_of_var_sink(la, a, b),
                        !assign_constant(la).




.decl not_successive_if(i:label, j:label)
// .output not_successive_if(IO=stdout)
not_successive_if(i0,i2) :- if(i0,_,_,_), if(i1,_,_,_), if(i2,_,_,_),
                            reachable(i2,i0), reachable(i2,i1), reachable(i1,i0),
                            !reachable(i0,i1), !reachable(i1,i2),
                            if_else_finder(i2,_,_).




.decl successive_if(i:label, j:label) /*The if in label i is the successive if of the if in label j*/
// .output successive_if(IO=stdout)
successive_if(i0,i2) :- if(i0,_,_,_), if(i2,_,_,_), reachable(i2,i0),
                        if_else_finder(i2,_,_), !not_successive_if(i0,i2).


.decl new_reachable(l:label, j:label)
// .output new_reachable(IO=stdout)
new_reachable(l,j) :- reachable(l,j).
new_reachable(l10,l6)  :- reachable(l10,l9), if_else_finder(l6,l9,_).


.decl find_all_assign_of_var_in_if(l:label, j:label, v:var)
// .output find_all_assign_of_var_in_if(IO=stdout)

find_all_assign_of_var_in_if(l1,i,v1) :- ( if(i,_,v1,_);(if(i,_,_,v1))), reachable(i,l1),
                                            (
                                                (   assign(l1,v1,d1,d2)
                                                // ,(candidate(l2,d1);candidate(l2,d2)), 
                                                //     reachable(l1,l2) 
                                                )
                                                ;
                                                (source(l1,v1))
                                            ).


.decl NOT_find_all_assign_of_var_in_if(l:label, j:label, v:var)
// .output NOT_find_all_assign_of_var_in_if(IO=stdout)
NOT_find_all_assign_of_var_in_if(l1,j1,v1) :- find_all_assign_of_var_in_if(l1,j1,v1), find_all_assign_of_var_in_if(l2,j2,v1),
                                            reachable(l2,l1).


.decl find_closest_assign_of_var_in_if(l:label, j:label, v:var)

// .output find_closest_assign_of_var_in_if(IO=stdout)

find_closest_assign_of_var_in_if(l,j,v) :- find_all_assign_of_var_in_if(l,j,v), !NOT_find_all_assign_of_var_in_if(l,j,v),
                                            (
                                                (   assign(l,v,d1,d2),
                                                    (candidate(l2,d1);candidate(l2,d2)), 
                                                    reachable(l,l2) 
                                                )
                                                ;
                                                (source(l,v1))
                                            ).




.decl new_dependencies(i:label, l:label, d:var,s: symbol)
// .output new_dependencies(IO=stdout)

/*-----------------------------------------------------------------------------------------------------------
/* IF CASE: RECURSIVE, FOR MORE THAN 2 NESTED IF-ELSE
/*RIGHT-HAND-SIDE: Case */

// new_dependencies(ls,d) :- if_else_finder(i,e,j), if(i,_,v1,v2), ( (candidate(l1,v1), reachable(i,l1));())
 
// due if, sia if che else, metti sopra. RIGHT-HAND
new_dependencies(ls, i2,d,s) :-     s="right", successive_if(i1,i2), belonging_if(ls,i2),
                                (new_dependencies(i2,_,d,s); dependencies(i2,_,_,d,s)),
                                if_else_finder(i2,e2,_),
                                (new_dependencies(e2,_,d,s); dependencies(e2,_,_,d,s)). /*RIGHT-HAND-SIDE CASE*/

/*Caso con un solo if-else */
new_dependencies(i2, i2,d,s) :-    s="right", if_else_finder(i2,e2,_), 
                            dependencies(i2,_,_,d,s) , dependencies(e2,_,_,d,s),
                            counter1 = count:{if(_,_,_,_)}, counter1 <3. /*RIGHT-HAND-SIDE CASE*/

 new_dependencies(i, i,d,s) :-    s="right", most_external_if(i,e,j), 
                            ( new_dependencies(i,_,d,s); dependencies(i,_,_,d,s) ),
                            ( new_dependencies(e,_,d,s); dependencies(e,_,_,d,s) ).


new_dependencies(ls, i2,d,s ) :-    s="left", successive_if(i1,i2), belonging_if(ls,i2),
                                (new_dependencies(i2,_,d,s); dependencies(i2,_,_,d,s)),
                                if_else_finder(i2,e2,_),
                                (new_dependencies(e2,_,d,s ); dependencies(e2,_,_,d,s)). /*LEFT-HAND-SIDE CASE*/
 
 /*Caso con un solo if-else */
new_dependencies(i2, i2,d,s) :-    s="left", (new_dependencies(i2,_,d,s); dependencies(i2,_,_,d,s)),
                            if_else_finder(i2,e2,_),(new_dependencies(e2,_,d,s); dependencies(e2,_,_,d,s)),
                            counter1 = count:{if(_,_,_,_)}, counter1 <3. /*LEFT-HAND-SIDE CASE*/
 

new_dependencies(i, i,d,s ) :-     s="left", most_external_if(i,e,j), 
                            ( new_dependencies(i,_,d,s); dependencies(i,_,_,d,s) ),
                            ( new_dependencies(e,_,d,s); dependencies(e,_,_,d,s) ). /*LEFT-HAND-SIDE CASE*/



.decl not_final(l:label, d:var, j:label, s:symbol)
// .output not_final(IO=stdout)
not_final(l1,d, l, s) :-  s="right", ( new_dependencies(_,l,d,s); very_new_dependencies(l,d,s) ),
                    ( new_dependencies(_,l1,d,s);very_new_dependencies(l1,d,s) ), new_reachable(l1,l).

not_final(l, d, l1, s) :-  s="left", 
                        ( ( new_dependencies(_,ld,d,s), if_else_finder(ld,_,l));very_new_dependencies(l,d,s) ),
                        (( new_dependencies(_,lq,d,s), if_else_finder(lq,_,l1));very_new_dependencies(l1,d,s) ), 
                    new_reachable(l1,l).





.decl very_new_dependencies(l:label, d:var, s:symbol) /*Prende dependencies e ricopia mettendo il sanitize nel label subito dopo */
// .output very_new_dependencies(IO=stdout)

very_new_dependencies(l,d,s) :- s="right", dependencies(q,_,_,d,s), if(q,l,_,_).

very_new_dependencies(ls,d,s) :-  s="right",dependencies(_,q,d,_,s), var_in_sink_NOT_assigned_in_a_path(_,q,_),
                                follows(ls,q).

very_new_dependencies(l,d,s) :-  s="left", dependencies(_,q,_,d,s), follows(l,q).


// /*
//     IMPORTANT!!! IN "second_sanitize" THE SANITIZE HAS TO BE READ AS "AFTER THAT LABEL" THIS IS DUE TO THE FACT THAT
//     THE ELSE FOLLOWS THE LABEL PRECEDEING THE IF, SO IF I DO THE SANITIZE IN THE IF LABEL THE ELSE WOULDN'T SEE IT
// */
.decl second_sanitize(l:label, d:var, s:symbol)
// .output second_sanitize(IO=stdout)

second_sanitize(lp,d,s ) :-  s="right",  ( new_dependencies(_,lp,d,s);very_new_dependencies(lp,d,s) ),
                            !not_final(lp,d,_,s).

second_sanitize(ls,d,s) :-    s="left",new_dependencies(_,lp,d,s), if_else_finder(lp,_,ls),
                            !not_final(ls,d,_,s).

second_sanitize(lp,d, s) :-   s="left",  dependencies(_,ls,_,d,s), follows(lp,ls),
                            !not_final(lp,d,_,s).



// /*
//     TODO: controllare ci sia il closest nelle varie dependeci o boh non so dove.

// */

.decl sanitize(l:label, d:var)
.output sanitize(IO=stdout)
sanitize(l1, d1) :- counter1 = count:{second_sanitize(_,_,s1)}, s1="right", 
                        second_sanitize(l1,d1,s1),
                        counter2 = count:{second_sanitize(_,_,s2)}, s2="left",
                        counter1 <= counter2 .

sanitize(l2, d2) :- counter1 = count:{second_sanitize(_,_,s1)}, s1="right", 
                        second_sanitize(l1,d1,s1),
                        counter2 = count:{second_sanitize(_,_,s2)}, s2="left",
                        second_sanitize(l2,d2,s2),
                        counter1 > counter2 .

sanitize(ls,d) :- sanitize_no_if(ls,d).