// Authors: Marco Ravazzini & Flavia Cavallaro
//          with the partecipation of Calcutta
//		 <3 <3 Calcutta <3 <3



.type label
.type var
.type opc = [x:number,c:number]
.type opv = [x:number,y:number]
//.type expr //= number | var | opc | opv
//.type cond //= [e:expr,constyp:number]// assume 1 for <, 2 for <= and 3 for ==, 4 for >= and 5 for >

// -- inputs --
.decl source( l:label, x:var )
.decl sink( l:label, x:var ) 
.decl follows( l1:label, l2:label) 

.decl join(l1: label, l2: label, l3:label) 
.decl assign( l:label, x:var, y:var, z:var ) 
.decl if(l1:label, l2:label, x:var, y:var)

source("l1","x").

sink("l9","y").

follows("l2","l1").
follows("l3","l2").
follows("l4","l3").
follows("l5","l4").
follows("l6","l2").
follows("l7","l6").
follows("l8","l7").
follows("l9","l5").
follows("l9","l8").

join("l9","l5","l8").	

assign("l2","y","x","z").	
assign("l4","y","5","0").
assign("l7","z","2","0").

if("l3","l4","z","2").	
if("l6","l7","z","2").	



//##############################################################################



/**
*   The Labels function return the labels that indicates each lines 
*   (ex. l1, l2 ...)
*/
.decl Labels(i:label )
//.output Labels(IO=stdout)

Labels(l) :- source(l,_).
Labels(l) :- follows(l,_).
Labels(l) :- follows(_,l).


/**
*   The Numbers function strips the labes in order to optain only the number of
*   lines, ignoring the first character 
*/
.decl Numbers(i:symbol )
//.output Numbers(IO=stdout)
Numbers( substr(x,1,strlen(x)-1) ) :- Labels(x), strlen(x) > 1.
 

/**
*   Returns al the lines y that are greater than line x
*/

.decl Less(x:symbol, y:symbol)
//.output Less(IO=stdout)
Less(x,y) :-Numbers(x), Numbers(y), ord(x) < ord(y). 


.decl Transitive(x:symbol, y:symbol) 
//.output Transitive(IO=stdout)
Transitive(x,z) :-Less(x,y), Less(y,z). 


/**
*   Returns the line i with line i+1 (ex. l1  l2, l2  l3 ecc..)
*/
.decl Next_line(i:symbol, j:symbol) // j after i
.output Next_line(IO=stdout)
Next_line(cat("l", i),cat("l", j)) :-Less(i,j), !Transitive(i,j).


/**
*   Return the line of the IF, their respective ELse and the Join 
*   (ex. l2      l10     l18)
*/
.decl Loop(i:label, e:label, j:label)
.output Loop(IO=stdout)
Loop(i,e,j) :- if(i, _ ,x,y), if(e, _ ,x,y), join(j, l ,_), Next_line(l,e), 
                Next_line( l2,i),follows(e, l2).


/**
*   The candidate function return all the variables (and the lines in wich they 
*   are declareted) that are dependent from the user's input  direcly or as 
*   reference. Included the conditions of the IF   (ex l1 x, l7 u)
*/
.decl candidate( l:label, x: var) 
.output candidate(IO=stdout)
candidate(l, x) :- source( l ,x).
candidate(l, x) :- assign(l,x,y,z), candidate(_,y).
candidate(l, x) :- assign(l,x,_,z), candidate(_,z).
candidate(l, x) :- if(l,_,x,_), candidate(_,x).
candidate(l, x) :- if(l,_,_,x),candidate(_,x).








