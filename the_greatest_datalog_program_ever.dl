// Authors: Marco Ravazzini & Flavia Cavallaro
//          with the partecipation of Calcutta
//		 <3 <3 Calcutta <3 <3



.type label
.type var
.type opc = [x:number,c:number]
.type opv = [x:number,y:number]
//.type expr //= number | var | opc | opv
//.type cond //= [e:expr,constyp:number]// assume 1 for <, 2 for <= and 3 for ==, 4 for >= and 5 for >

// -- inputs --
.decl source( l:label, x:var )
.decl sink( l:label, x:var ) 
.decl follows( l1:label, l2:label) 

.decl join(l1: label, l2: label, l3:label) 
.decl assign( l:label, x:var, y:var, z:var ) 
.decl if(l1:label, l2:label, x:var, y:var)



// source("l1","x").

// sink("l19","u").	

// follows("l2","l1").
// follows("l3","l2").
// follows("l4","l3").
// follows("l5","l4").
// follows("l6","l2").
// follows("l7","l6").
// follows("l8","l7").
// follows("l9","l5").
// follows("l9","l8").
// follows("l10","l1").
// follows("l11","l10").
// follows("l12","l11").
// follows("l13","l12").
// follows("l14","l10").
// follows("l15","l14").
// follows("l16","l15").
// follows("l17","l13").
// follows("l17","l16").
// follows("l18","l9").
// follows("l18","l17").
// follows("l19","l18").


// join("l9","l5","l8").
// join("l17","l13","l16").
// join("l19","l9","l17").

// assign("l4","u","x","0").
// assign("l7","u","0","0").
// assign("l12","u","y","0").
// assign("l15","u","z","0").
// assign("l17","s","x","0").


// if("l2","l3","y","0").
// if("l3","l4","z","0").
// if("l6","l7","z","0").
// if("l10","l11","y","0").
// if("l11","l12","z","0").
// if("l14","l15","z","0").

source("l1","x").

sink("l18","u").	

follows("l2","l1").
follows("l3","l2").
follows("l4","l3").
follows("l5","l4").
follows("l6","l2").
follows("l7","l6").
follows("l8","l7").
follows("l9","l5").
follows("l9","l8").
follows("l10","l1").
follows("l11","l10").
follows("l12","l11").
follows("l13","l12").
follows("l14","l10").
follows("l15","l14").
follows("l16","l15").
follows("l17","l13").
follows("l17","l16").
follows("l18","l9").
follows("l18","l17").

join("l9","l5","l8").
join("l17","l13","l16").
join("l18","l9","l17").

assign("l4","u","x","0").
assign("l7","u","0","0").
assign("l12","u","y","0").
assign("l15","u","z","0").


if("l2","l3","y","0").
if("l3","l4","z","0").
if("l6","l7","z","0").
if("l10","l11","y","0").
if("l11","l12","z","0").
if("l14","l15","z","0").

//##############################################################################



/**
*   The Labels function return the labels that indicates each lines 
*   (ex. l1, l2 ...)
*/
.decl Labels(i:label )
//.output Labels(IO=stdout)

Labels(l) :- source(l,_).
Labels(l) :- follows(l,_).
Labels(l) :- follows(_,l).


/**
*   The Numbers function strips the labes in order to optain only the number of
*   lines, ignoring the first character 
*/
.decl Numbers(i:symbol )
//.output Numbers(IO=stdout)
Numbers( substr(x,1,strlen(x)-1) ) :- Labels(x), strlen(x) > 1.
 

/**
*   Returns al the lines y that are greater than line x
*/

.decl Less(x:symbol, y:symbol)
//.output Less(IO=stdout)
Less(x,y) :-Numbers(x), Numbers(y), ord(x) < ord(y). 


.decl Transitive(x:symbol, y:symbol) 
//.output Transitive(IO=stdout)
Transitive(x,z) :-Less(x,y), Less(y,z). 


/**
*   Returns the line i with line i+1 (ex. l1  l2, l2  l3 ecc..)
*/
.decl Next_line(i:symbol, j:symbol) // j after i
//.output Next_line(IO=stdout)
Next_line(cat("l", i),cat("l", j)) :-Less(i,j), !Transitive(i,j).


/**
*   Return the line of the IF, their respective ELse and the Join 
*   (ex. l2      l10     l18)
*/
.decl Loop(i:label, e:label, j:label)
//.output Loop(IO=stdout)
Loop(i,e,j) :- if(i, _ ,x,y), if(e, _ ,x,y), join(j, l ,_), Next_line(l,e), 
                Next_line( l2,i),follows(e, l2).


/**
*   The candidate function return all the variables (and the lines in wich they 
*   are declareted) that are dependent from the user's input  direcly or as 
*   reference. Included the conditions of the IF   (ex l1 x, l7 u)
*/
.decl candidate( l:label, x: var) 
.output candidate(IO=stdout)
candidate(l, x) :- source( l ,x).
candidate(l, x) :- assign(l,x,y,_), candidate(_,y).
candidate(l, x) :- assign(l,x,_,z), candidate(_,z).
candidate(l, x) :- if(l,_,x,_), candidate(_,x).
candidate(l, x) :- if(l,_,_,x),candidate(_,x).




.decl find_possible_ifs_of_candidate(l:number, j:label)
//.output find_possible_ifs_of_candidate(IO=stdout)

find_possible_ifs_of_candidate(ord(m)-23,l1 ) :- 
                if(l,_,_,_) , candidate(l1,_), reachable(l1,l), m=substr(l,1,strlen(l)-1),
                Loop(l,_,j),
                ord(substr(l1,1,strlen(l1)-1)) < ord(substr(j,1,strlen(j)-1)).


.decl find_belonging_if_of_candidate(j:number , l:label) //The candidate in label l belongs to the if in line j
.output find_belonging_if_of_candidate(IO=stdout)

find_belonging_if_of_candidate(j,l) :- find_possible_ifs_of_candidate(_,l), j = max x:{find_possible_ifs_of_candidate(x,l)}.



.decl hypothetical_candidate(l:label, x:var )
.output hypothetical_candidate(IO=stdout)

hypothetical_candidate(l,x) :- translate(num,l),find_belonging_if_of_candidate(num,lc) , candidate(lc,x).


/**
*   Returns the position (IF ELSE JOIN) of the if statements containing other
*   IF statements nested inside them
*/
.decl external_if(l:label, e:label, j:label )
//.output external_if(IO=stdout)
external_if (i1,e1, j1) :- Loop(i1,e1,j1), Loop(i2,_,j2), 
            ord(substr(i1,1,strlen(i1)-1))<ord(substr(i2,1,strlen(i2)-1)),
            ord(substr(j2,1,strlen(j2)-1))<ord(substr(e1,1,strlen(e1)-1)).



/**
*   Return the conditional statements that contains candidates variables inside 
*   both the if and and else body and has no nested IF
*/
.decl internal_if_both_candidate(l:label, e:label, j:label ,x:var)
.output internal_if_both_candidate(IO=stdout)
internal_if_both_candidate (i1,e1, j1, x):- Loop(i1,e1,j1), !external_if(i1,e1,j1),
        (
            ( //There is a candidate between i-e 
                candidate(l1,x) , 
                ord(substr(l1,1,strlen(i1)-1))>ord(substr(i1,1,strlen(i1)-1)),
                ord(substr(l1,1,strlen(i1)-1))<ord(substr(e1,1,strlen(e1)-1))
            ), //or it is between e-j
            (   
                candidate(l2,x),
                ord(substr(l2,1,strlen(l2)-1))>ord(substr(e1,1,strlen(e1)-1)),
                ord(substr(l2,1,strlen(l2)-1))<ord(substr(j1,1,strlen(j1)-1))
            )
        ).


/**
*   Return the IFs that are internal (they not contains nested if) and they not
*   contains candidate variables in both the IF and ELSE body 
*/
// TODO check that there should be at least one candidate
.decl internal_if_no_both_candidate(l:label, e:label, j:label )
.output internal_if_no_both_candidate(IO=stdout)
internal_if_no_both_candidate (i1, e1, j1):- Loop(i1,e1,j1), !external_if(i1,e1,j1), 
        !internal_if_both_candidate (i1,e1, j1, _).


.decl reachable(l:label, j:label)
reachable(X,Y)  :-  follows(X,Y).
reachable(X,Y)  :-  reachable(X,Z), follows(Z,Y).


.decl external_if_no_both_candidate(l:label, x:var )
.output external_if_no_both_candidate(IO=stdout)
external_if_no_both_candidate (l1, x) :-Loop(l1,e1,_),
                                        find_belonging_if_of_candidate(num1,lc1),
                                        translate(num1,l1), 
                                        candidate(lc1,x), 
                                        !find_belonging_if_of_candidate(num2,lc2), 
                                        translate(num2,e1),
                                        candidate(lc2,x).
       
.decl external_if_both_candidate(l:label, x:var )
.output external_if_both_candidate(IO=stdout)
external_if_both_candidate(l1,x) :- Loop(l1,e1,_),
                                        find_belonging_if_of_candidate(num1,lc1),
                                        translate(num1,l1), 
                                        candidate(lc1,x), 
                                        find_belonging_if_of_candidate(num2,lc2), 
                                        translate(num2,e1),
                                        candidate(lc2,x).


.decl translate(x:number, i:label)
//.output translate(IO=stdout)
translate(x,i) :- Labels(i), x=ord(substr(i,1,strlen(i)-1))-23.




.decl not_candidate(l:label, x:var)
.output not_candidate(IO=stdout)

not_candidate(l,x) :- internal_if_no_both_candidate(l,_,_ ), hypothetical_candidate(l,x).
not_candidate(l,x) :- internal_if_no_both_candidate(_,l,_ ), hypothetical_candidate(l,x).
not_candidate(i1,x) :- external_if(i1, e1, _), not_candidate(i2,x),
        ord(substr(i2,1,strlen(i2)-1))>ord(substr(i1,1,strlen(i1)-1)),
        ord(substr(i2,1,strlen(i2)-1))<ord(substr(e1,1,strlen(e1)-1)),
        !external_if_both_candidate(i1,x).
not_candidate(e1,x) :- external_if(_, e1, j1), not_candidate(i2,x),
        ord(substr(i2,1,strlen(i2)-1))>ord(substr(e1,1,strlen(e1)-1)),
        ord(substr(i2,1,strlen(i2)-1))<ord(substr(j1,1,strlen(j1)-1)),
        !external_if_both_candidate(e1,x).

// FALLO PURE SULL'ELSE 
// not_candidate(l,x) :- external_if(i1, e1, j1), external_if(i2, e2, j2),  





.decl sanitize(l1:label, x: var) 
//.output sanitize(IO=stdout)


sanitize(l,x) :- candidate(l,x), sink(_,x).
//sanitize(l,x) :- candidate(_,x), sink(l,x).
sanitize(l,x) :- candidate(_,x), if(l,_,x,_).




// 1-  SE C'È UN CANDIDATE CHE SOPRA NON HA IF ALLORA SICURAMENTE LA SANITIZE VA FATTA LÌ
// 4- PAY ATTENTION TO THE OPC

.decl HC_numbers(x: number ,v:var) //hypotethical candidate with labels converted in number
.output HC_numbers(IO=stdout)
HC_numbers(x,v) :- hypothetical_candidate(l1,v),  translate(x,l1).

.decl HC_NON_NOT_CANDIDATE(x:number, v:var)
.output HC_NON_NOT_CANDIDATE(IO=stdout)
HC_NON_NOT_CANDIDATE(x,v)  :-  HC_numbers(x,v), translate(x,l1), !not_candidate(l1,v).

// 2- FILTER_UNO: FIRST HYPOTETHICAL CANDIDATE THAT IS NOT A "NOT_CANDIDATE" !
.decl filter_one(l:number, v:var )
.output filter_one(IO=stdout)
filter_one(x, v) :-  HC_NON_NOT_CANDIDATE(_,v), 
                x = min y:{HC_NON_NOT_CANDIDATE(y,_)}.
//TODO: Alla fine riconvertire in label.


// 3- OTHERWISE INSIDE THE IF WHEN THERE IS NOTHING ELSE ABOVE.
.decl filter_two(l:number, v:var)
.output filter_two(IO=stdout)

filter_two(l,v) :- translate(l,l0), candidate(l0,v), !filter_one(l1,v), translate(l1,useless),
            l<l1,
            !candidate(l2,v),
            translate(num2,l2),
            num2<l.


// -- analysis --
